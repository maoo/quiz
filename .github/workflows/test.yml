name: Test

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'scripts/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'scripts/**'
      - 'tests/**'
      - 'pyproject.toml'
      - 'poetry.lock'
      - '.github/workflows/test.yml'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
        
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
        
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        
    - name: Install dependencies (no root)
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root      
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit == 'true'
      run: poetry install --no-interaction
      
    - name: Run Python tests
      run: |
        poetry run pytest --cov=src --cov-report=xml
  
    # - name: Test QR Generator
    #   run: poetry run pytest tests/test_qr_generator.py -v --cov=src/qr_generator --cov-report=xml

    # - name: Run tests
    #   run: poetry run pytest tests/test_svg_to_pdf.py -v

    # - name: Run tests
    #   run: poetry run pytest tests/test_yaml_to_markdown.py -v

    - name: Test directory conversion
      run: |
        # Create test directory with SVG files
        mkdir -p /tmp/test-svgs
        echo '<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg"><rect width="100" height="100" fill="red"/></svg>' > /tmp/test-svgs/test1.svg
        echo '<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg"><circle cx="50" cy="50" r="40" fill="blue"/></svg>' > /tmp/test-svgs/test2.svg
        
        # Create a non-SVG file to test filtering
        echo "# Test README" > /tmp/test-svgs/index.md
        
        # Run the converter
        poetry run python -m src.svg_to_pdf.converter /tmp/test-svgs -o /tmp/test-output
        
        # Verify output
        if [ ! -f "/tmp/test-output/test1.pdf" ] || [ ! -f "/tmp/test-output/test2.pdf" ]; then
          echo "PDF files were not generated correctly!"
          exit 1
        fi
        
        # Check PDF sizes
        for pdf_file in /tmp/test-output/*.pdf; do
          FILE_SIZE=$(du -k "$pdf_file" | cut -f1)
          if [ "$FILE_SIZE" -lt 1 ]; then
            echo "PDF file $pdf_file is too small (likely empty)"
            exit 1
          fi
        done
          
    - name: Install poppler-utils (for pdftotext)
      run: |
        sudo apt-get update && sudo apt-get install -y poppler-utils
          
    - name: Run integration test
      run: |
        chmod +x scripts/test_integration.sh
        ./scripts/test_integration.sh

    - name: Run type checking
      run: poetry run mypy src

    # - name: Upload coverage
    #   uses: codecov/codecov-action@v3
    #   with:
    #     file: ./coverage.xml
    #     fail_ci_if_error: true
      
    # - name: Run linting
    #   run: |
    #     poetry run black --check src tests
    #     poetry run isort --check-only src tests
    #     poetry run flake8 src tests 